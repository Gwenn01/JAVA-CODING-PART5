public class Main {
	public static void main(String[] args) {
		int[] arr = {2, 5, 6, 0, 0, 1, 2};
		int target = 3;
		
		System.out.println(search(arr, target));
	}
	public static boolean search(int[] arr, int target) {
      int pivot = pivotWithDuplicate(arr);
       
        if(binarySearch(arr, target, 0, pivot) != -1){
           System.out.println(binarySearch(arr, target, 0, pivot));
           return true; 
            }else if(binarySearch(arr, target, pivot+1, arr.length-1) != -1){
                System.out.println(binarySearch(arr, target, pivot+1, arr.length-1));
            return true;            
            }else{
            return false;
            }
        
    }
    	public static int binarySearch(int[] arr, int target, int start, int end){

	    int mid;

	    while(start <= end){

	        mid = start + (end - start) / 2;

	        if(target > arr[mid]){

	            start = mid + 1;

	        }else if(target < arr[mid]){

	            end = mid - 1;

	        }else{

	            return mid;

	        }

	        

	    }

	    return -1;

	}
    public static int pivotWithDuplicate(int[] arr){

	    int start = 0, end = arr.length-1, mid;

	    

	    while(start < end){

	        mid = start + (end - start) / 2;

	        if(mid < end && arr[mid] > arr[mid+1]){

	            return mid;

	        }

	        if(mid > start && arr[mid] < arr[mid-1]){

	            return mid -1;

	        }

	        if(arr[start] == arr[mid] && arr[end] == arr[mid]){

	          if(arr[start] > arr[start+1]){

	              return start;

	          }

	          start++;

	          if(arr[end] < arr[end-1]){

	              return end -1;

	          }

	          end--;

	        }else if(arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])){
	            start = mid +1;
	        }else{
	            end = mid -1;
	        }	        	  

	    }

	   return -1;

	}
}